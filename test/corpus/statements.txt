==================
Return statements
==================

return 1;

---

(source_file
  (return_statement (number)))

==================
Let statements
==================

let a = 10;

---

(source_file
  (let_statement
  (identifier)
  (number)))

==================
Function expression
==================

fn(a, b, c) {
  return 1;
}

fn() {
  return 1;
}

---

(source_file
  (expression_statement
    (function_declaration
      (parameter_list
        (identifier)
        (identifier)
        (identifier))
      (block
        (return_statement
          (number)))))

  (expression_statement
    (function_declaration
      (parameter_list)
      (block
        (return_statement
          (number)))))
)

==================
If expression
==================

if(1) {
  return 2;
}

if(1) {
  return 2;
} else {
  return 3
}

---

(source_file
  (expression_statement
    (if_expression
        (number)
      (block
        (return_statement
          (number)))))

  (expression_statement
    (if_expression
        (number)
      (block
        (return_statement
          (number)))
      (block
        (return_statement
          (number))))))

==================
True/False expression
==================

true;
false;

---

(source_file
  (expression_statement
  (true))
  (expression_statement
  (false)))

==================
String expression
==================

""
"daco";

---

(source_file
  (expression_statement
  (string))
  (expression_statement
  (string)))

==================
Prefix expression
==================

-a
!1
!!!1

---

(source_file
  (expression_statement
    (prefix_expression
      (identifier)))
  (expression_statement
    (prefix_expression
      (number)))
  (expression_statement
    (prefix_expression
      (prefix_expression
        (prefix_expression
          (number))))))

==================
Infix expression
==================

a + b
a * b

a + b * c

a + b < a * c

(a + b) * c

---

(source_file
  (expression_statement
    (infix_expression
      (identifier)
      (identifier)
      ))

  (expression_statement
    (infix_expression
      (identifier)
      (identifier)))

  (expression_statement
    (infix_expression
      (identifier)
        (infix_expression
          (identifier)
          (identifier))))

  (expression_statement
    (infix_expression
      (infix_expression
        (identifier)
        (identifier))
      (infix_expression
        (identifier)
        (identifier))))

  (expression_statement
    (infix_expression
      (grouped_expression
      (infix_expression
        (identifier)
        (identifier)))
      (identifier))))

==================
Array expression
==================

[]
[1]
[1, 2]
[1, 2, 3]

---

(source_file
  (expression_statement
    (array_expression))
  (expression_statement
    (array_expression
      (number)))
  (expression_statement
    (array_expression
      (number)
      (number)))
  (expression_statement
    (array_expression
      (number)
      (number)
      (number))))

==================
Hash expression
==================

{}
{1:2}
{1:3, 2:3}
{1:3, 2:2, 3:1}

---

(source_file
  (expression_statement
    (hash_expression))
  (expression_statement
    (hash_expression
      (pair
      (number)
      (number))))
  (expression_statement
    (hash_expression
      (pair
      (number)
      (number))
      (pair
      (number)
      (number))))
  (expression_statement
    (hash_expression
      (pair
      (number)
      (number))
      (pair
      (number)
      (number))
      (pair
      (number)
      (number)))))

==================
Index expression
==================

a[1]
[1,2,3][1]
{1:2}["daco"]

---

(source_file
  (expression_statement
    (index
      (identifier)
      (number)))

  (expression_statement
    (index
      (array_expression
        (number)
        (number)
        (number))
      (number)))

  (expression_statement
    (index
      (hash_expression
        (pair
        (number)
        (number)))
      (string)
  )))

==================
Call expression
==================

fn(a) {}(1)
a(1)
a()

---

(source_file

  (expression_statement
    (call
      (function_declaration
      (parameter_list
        (identifier))
      (block))
    (argument_list
      (number))))

  (expression_statement
    (call
    (identifier)
    (argument_list
      (number))))

  (expression_statement
    (call
    (identifier)
    (argument_list)))
)
